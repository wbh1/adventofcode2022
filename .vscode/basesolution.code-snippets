{
	// Place your adventofcode2022 workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
    "New Solution": {
        "scope": "go",
        "prefix": "basesolution",
        "body": [
            "package solutions",
            "",
            "type Day${1:Zero} struct {",
            "\tinput []string",
            "}",
            "",
            "func (d *Day${1:Zero}) SetInput(input []string) {",
            "\td.input = input",
            "}",
            "",
            "func (d *Day${1:Zero}) PartOne() string {",
            "\treturn \"Not implemented.\"",
            "}",
            "",
            "func (d *Day${1:Zero}) PartTwo() string {",
            "\treturn \"Not implemented.\"",
            "}",
            ""
        ]
    },

        "New Solution Test": {
        "scope": "go",
        "prefix": "bst",
        "body": [
            "package solutions_test",
            "",
            "import (",
            "\t\"strings\"",
            "\t\"testing\"",
            "",
            "\t\"github.com/wbh1/adventofcode2022/solutions\"",
            ")",
            "",
            "var (",
            "\tDay${1:Zero} = DayTest{Input:`${2:INPUT_PLACEHOLDER}`, \"\\n\"),",
            "\t\tAlwaysRunPartOne: true,",
            "\t\tDay:\t\t\t  &solutions.Day${1:Zero}{},",
            "\t\tPart1Result:\t  \"${3:PartOneResult}\",",
            "\t\tPart2Result:\t  \"4\",",
            "\t}",
            ")",
            "",
            "func TestDay${1:Zero}PartOne(t *testing.T) {",
            "\tDay${1:Zero}.TestDayPartOne(t)",
            "}",
            "",
            "func TestDay${1:Zero}PartTwo(t *testing.T) {",
            "\tDay${1:Zero}.TestDayPartTwo(t)",
            "}",
            ""
        ],
        "description": "Base test for AoC solution"
    }
}